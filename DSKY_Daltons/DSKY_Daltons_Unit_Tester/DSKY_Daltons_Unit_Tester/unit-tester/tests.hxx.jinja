// DO NOT MODIFY THIS FILE as it will be overwritten at maketime by jinja templating
// Modify the tests.hxx.jinja template instead
// 
// @author 2021 - Till Blaha

#define DO_INSTANTIATE
#include <dusime.h>
USING_DUECA_NS;

#include "comm-objects.h"
#include <sstream>
//#include "tester.hxx"

// redefining a macro to test tokens outside the sim-module class by just passing the missing data
#define CHECK_TOKEN_BEUN(A, id, classname) \
  if (! (A) .isValid() ) {                               \
    W_MOD(id << '/' << classname                       \
          << " channel token " #A " for channel "      \
          << (A) .getName() << " not (yet) valid");               \
    res = false; \
  }

using namespace std;

class tests
{
private:
   const char* const classname;

public:
   int _num_tests = {{ tests | length }} - 1;
   int _test_id = 0;

   int _num_csv_tests = {{ csvtests | length }};
   int _csv_test_id = 0;

   float _test_wait = 0;
   float _log_every_seconds = 0;

   GlobalId globid{};

   {% for dbo in debug_outputs -%}
   float {{ dbo | replace(".", "_") }} {};
   {% endfor -%}

   {% for ch in stream_output_channels -%}
   StreamChannelReadToken<{{ ch.split('/')[-1].split('.')[0] }}> {{ ch.split('/')[-1].split('.')[0] }}Token;
   {% endfor -%}
   {% for ch in stream_input_channels -%}
   StreamChannelWriteToken<{{ ch.split('/')[-1].split('.')[0] }}> {{ ch.split('/')[-1].split('.')[0] }}Token;
   {% endfor %}

public:
   tests(const GlobalId& Id, const string Entity, const char *part, const char *classname_in) : 
      classname(classname_in),
      globid(Id),
      {% for ch in stream_output_channels -%}
         {{ ch.split('/')[-1].split('.')[0] }}Token(Id, NameSet(Entity, "{{ ch.split('/')[-1].split('.')[0] }}", part)),
      {% endfor -%}
      {% for ch in stream_input_channels -%}
         {{ ch.split('/')[-1].split('.')[0] }}Token(Id, NameSet(Entity, "{{ ch.split('/')[-1].split('.')[0] }}", part)){% if not loop.last %},{% endif %}
      {% endfor -%}
      {

      };

   bool check_test_tokens() {
      bool res = true;

      {% for ch in stream_output_channels -%}
         CHECK_TOKEN_BEUN({{ ch.split('/')[-1].split('.')[0] }}Token, globid, classname);
      {% endfor -%}
      {% for ch in stream_input_channels -%}
         CHECK_TOKEN_BEUN({{ ch.split('/')[-1].split('.')[0] }}Token, globid, classname);
      {% endfor %}
      return res;
   }

public:
   void write_csv_test_data(const TimeSpec& ts, const vector<float>& row, const int& test_id) {
      {% for ch, delay in stream_input_channels.items() -%}
      StreamWriter<{{ ch.split('/')[-1].split('.')[0] }}> {{ ch.split('/')[-1].split('.')[0] }}Writer({{ ch.split('/')[-1].split('.')[0] }}Token, ts + {{ delay }});
      {% endfor %}

      switch (test_id) {
         {% for csvtest in csvtests -%}
         case {{ loop.index0 }}:
            _log_every_seconds = {{ csvtest.log_every_seconds | default(0, true) }};
            {% for var in csvtest.variables -%}
               {{ var.split('.') | join("Writer.data().") }} = row[{{ loop.index0 }}];
            {% endfor -%}
            break;
         {% endfor -%}
      }
   }

   void add_csv_header(stringstream& csv_output, string& csv_input_file_name, const int& test_id) {
      csv_output << "Time [s]" << ","
      {% for out in debug_outputs -%}
            << "{{ out }}" {% if not loop.last %}<< ","{% else %}<< endl;{% endif %}
      {% endfor %}

      switch (test_id) {
         {% for csvtest in csvtests -%}
         case {{ loop.index0 }}:
            csv_input_file_name = "{{ csvtest.input }}";
            break;
         {% endfor -%}
      }
   }

   void add_csv_data_line(stringstream& csv_output, const float& time_elapsed, const int& test_id) {

      read_response();

      csv_output << time_elapsed << ","
      {% for out in debug_outputs -%}
            << {{ out.replace('.', '_') }} {% if not loop.last %}<< ","{% else %}<< endl;{% endif %}
      {% endfor %}
   }

   void write_test_data(const TimeSpec& ts, const int& test_id) {
      {% for ch, delay in stream_input_channels.items() -%}
      StreamWriter<{{ ch.split('/')[-1].split('.')[0] }}> {{ ch.split('/')[-1].split('.')[0] }}Writer({{ ch.split('/')[-1].split('.')[0] }}Token, ts + {{ delay }});
      {% endfor %}

      switch (test_id) {
         {% for test in tests -%}
         case {{ loop.index0 - 1 }}:
            _test_wait = {{ test.wait_seconds | default(0, true) }};
            _log_every_seconds = {{ test.log_every_seconds | default(0, true) }};
            {% for name, data in test.inputs.items() -%}
               {{ name.split('.') | join("Writer.data().") }} = {{ data }};
            {% endfor -%}
            break;
         {% endfor -%}
      }
   };

   bool evaluate_response(string& desc) {
      read_response();

      bool running_bool = true;
      switch (_test_id) {
         {% for test in tests -%}
         case {{ loop.index - 1 }}:
            desc = "{{ test.desc }}";
            {% for name, data in test.outputs.items() -%}
               running_bool &= (abs({{ name.replace(".", "_") }} - {{ data[0] }}) < {{ data[1] }});
            {% endfor -%}
            break;
         {% endfor -%}
      }
      return running_bool;
   }

   void read_response() {
      {% for ch in stream_output_channels -%}
      StreamReaderLatest<{{ ch.split('/')[-1].split('.')[0] }}> {{ ch.split('/')[-1].split('.')[0] }}Reader({{ ch.split('/')[-1].split('.')[0] }}Token);
      {% endfor -%}

      {% for dbo in debug_outputs -%}
      {{ dbo | replace(".", "_") }} = {{ dbo.split('.') | join("Reader.data().") }};
      {% endfor %}
   }

   void generate_debug_info(stringstream& debug_info) {
      {% for ch in stream_output_channels -%}
      StreamReaderLatest<{{ ch.split('/')[-1].split('.')[0] }}> {{ ch.split('/')[-1].split('.')[0] }}Reader({{ ch.split('/')[-1].split('.')[0] }}Token);
      {% endfor %}
      {% for out in debug_outputs -%}
      debug_info << "{{ out }} = " << {{ out.replace('.', '_') }} << endl;
      {% endfor -%}
   }
};

